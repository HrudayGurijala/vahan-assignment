# app/agents/proof_reader_agent.py
import openai
import os
from typing import Dict, List, Any

from dotenv import load_dotenv
load_dotenv()


class ProofReaderAgent:
    """Agent responsible for reviewing and improving paper summaries"""
    
    def __init__(self):
        # Initialize OpenAI client (assuming API key is set in environment variables)
        self.client = openai.OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))
        
    def review_summary(
        self, 
        draft_summary: Dict[str, Any],
        full_text: str
    ) -> Dict[str, Any]:
        """
        Review and improve a draft summary
        
        Args:
            draft_summary: Draft summary generated by the SummaryWriterAgent
            paper_metadata: Metadata about the paper
            full_text: Full text of the paper
            
        Returns:
            Improved summary dictionary
        """
        # Prepare prompt for the LLM
        system_prompt = """
        You are an expert academic editor specializing in research paper summaries. 
        Your task is to review and improve a draft summary of an academic paper.
        
        Your review should focus on:
        1. Accuracy - Ensure the summary correctly represents the paper's content
        2. Completeness - Check that all major findings and contributions are included
        3. Clarity - Improve readability without sacrificing technical precision
        4. Conciseness - Remove redundancy while maintaining comprehensiveness
        
        Provide an improved version of the summary that addresses any issues you identify.
        """
        
        user_prompt = f"""
        Please review and improve this draft summary of the paper:
        
        
        Draft Summary:
        {draft_summary.get('summary', '')}
        
        Key Findings:
        {', '.join(draft_summary.get('key_findings', []))}
        
        Methodology:
        {draft_summary.get('methodology', '')}
        
        Implications:
        {draft_summary.get('implications', '')}
        
        Please verify the accuracy of this summary against the paper's content and make improvements.
        
        First few paragraphs of the paper:
        {full_text[:5000]}  # Limiting to avoid token limits
        """
        
        # Generate improved summary using OpenAI API
        response = self.client.chat.completions.create(
            model="gpt-4-turbo",  # or any appropriate model
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.3,  # Lower temperature for more focused output
            max_tokens=2000
        )
        
        # Extract improved summary text
        improved_summary_text = response.choices[0].message.content
        
        # Parse the improved summary
        improved_summary = self._parse_improved_summary(improved_summary_text, draft_summary)
        
        return improved_summary
        
    def _parse_improved_summary(
        self, 
        improved_text: str, 
        original_summary: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Parse the improved summary text into structured sections
        
        Args:
            improved_text: Text of the improved summary
            original_summary: Original draft summary for reference
            
        Returns:
            Structured improved summary
        """
        # Start with the original structure but update with improved text
        result = {
            "summary": improved_text,  # Default to full text if parsing fails
            "key_findings": original_summary.get("key_findings", []),
            "methodology": original_summary.get("methodology", ""),
            "implications": original_summary.get("implications", ""),
            "citations": original_summary.get("citations", [])
        }
        
        # Try to extract sections from the improved text
        sections = {
            "summary": ["summary:", "improved summary:", "reviewed summary:"],
            "key_findings": ["key findings:", "main findings:", "findings:", "contributions:"],
            "methodology": ["methodology:", "methods:", "approach:"],
            "implications": ["implications:", "conclusion:", "impact:", "significance:"]
        }
        
        lines = improved_text.split('\n')
        current_section = "summary"
        section_content = []
        
        for line in lines:
            line_lower = line.lower().strip()
            
            # Check if this line starts a new section
            new_section_found = False
            for section, markers in sections.items():
                if any(line_lower.startswith(marker) for marker in markers):
                    # Save content from previous section
                    if section_content:
                        if current_section == "key_findings":
                            # Parse bullet points or numbered lists
                            findings = []
                            for content_line in section_content:
                                content_line = content_line.strip()
                                if content_line and (content_line.startswith('-') or content_line.startswith('•') or 
                                                   (content_line[0].isdigit() and content_line[1:3] in ['. ', ') '])):
                                    findings.append(content_line.lstrip('-•0123456789.) ').strip())
                            if findings:
                                result["key_findings"] = findings
                        else:
                            # For other sections, join the content
                            result[current_section] = '\n'.join(section_content).strip()
                    
                    # Start new section
                    current_section = section
                    section_content = []
                    new_section_found = True
                    break
            
            # If this is content for the current section (not a section header)
            if not new_section_found:
                section_content.append(line)
        
        # Don't forget to save the last section
        if section_content:
            if current_section == "key_findings":
                findings = []
                for content_line in section_content:
                    content_line = content_line.strip()
                    if content_line and (content_line.startswith('-') or content_line.startswith('•') or 
                                       (content_line[0].isdigit() and content_line[1:3] in ['. ', ') '])):
                        findings.append(content_line.lstrip('-•0123456789.) ').strip())
                if findings:
                    result["key_findings"] = findings
            else:
                result[current_section] = '\n'.join(section_content).strip()
        
        # If we couldn't parse a summary section, use the entire text
        if not result["summary"] or result["summary"] == improved_text:
            # Try to extract a better summary by removing section headers
            clean_summary = improved_text
            for section, markers in sections.items():
                for marker in markers:
                    clean_summary = clean_summary.replace(marker, '')
            result["summary"] = clean_summary.strip()
            
        # Extract quotes/citations if they exist in the improved text
        citations = []
        in_quotes = False
        quote_buffer = ""
        
        for char in improved_text:
            if char == '"':
                if in_quotes:
                    # End of quote
                    if quote_buffer.strip():
                        citations.append(quote_buffer.strip())
                    quote_buffer = ""
                in_quotes = not in_quotes
            elif in_quotes:
                quote_buffer += char
                
        if citations:
            result["citations"] = citations
            
        return result